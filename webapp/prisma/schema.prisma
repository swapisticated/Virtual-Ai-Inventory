generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  id           String   @id @default(cuid())
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Organization {
  id        String             @id @default(uuid())
  name      String
  createdAt DateTime           @default(now())
  items     InventoryItem[]
  sections  InventorySection[]
  users     User[]
  organizationCode String @unique
}

model InventorySection {
  id             String             @id @default(uuid())
  name           String
  description    String?
  createdAt      DateTime           @default(now())
  parentId       String?
  organizationId String
  items          InventoryItem[]
  organization   Organization       @relation(fields: [organizationId], references: [id])
  parent         InventorySection?  @relation("SectionHierarchy", fields: [parentId], references: [id])
  children       InventorySection[] @relation("SectionHierarchy")

  @@unique([name, organizationId])
  @@index([organizationId])
}

model InventoryItem {
  id             String             @id @default(uuid())
  name           String
  quantity       Int
  location       String
  sku            String             @unique
  createdAt      DateTime           @default(now())
  createdById    String
  sectionId      String?
  organizationId String
  auditLogs      AuditLog[]         @relation("ItemAuditLog")
  createdBy      User               @relation("CreatedByUser", fields: [createdById], references: [id])
  organization   Organization       @relation(fields: [organizationId], references: [id])
  section        InventorySection?  @relation(fields: [sectionId], references: [id])
  transactions   StockTransaction[]

  @@index([organizationId])
  @@index([sectionId])
}

model User {
  id             String          @id @default(uuid())
  email          String          @unique
  name           String
  organizationId String?
  password       String?
  role           UserRole?       @default(ADMIN)
  emailVerified  DateTime?
  image          String?
  updatedAt      DateTime        @updatedAt
  createdAt      DateTime        @default(now())
  accounts       Account[]
  createdItems   InventoryItem[] @relation("CreatedByUser")
  sessions       Session[]
  organization   Organization?   @relation(fields: [organizationId], references: [id])
}

model AuditLog {
  id             String        @id @default(uuid())
  itemId         String
  action         AuditAction
  quantityChange Int
  timestamp      DateTime      @default(now())
  item           InventoryItem @relation("ItemAuditLog", fields: [itemId], references: [id])
}

model StockTransaction {
  id        String          @id @default(uuid())
  itemId    String
  quantity  Int
  type      TransactionType
  timestamp DateTime        @default(now())
  item      InventoryItem   @relation(fields: [itemId], references: [id])
}

enum UserRole {
  ADMIN
  MANAGER
  VIEWER
}

enum TransactionType {
  ADD
  REMOVE
  TRANSFER
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  MOVE
  ADJUST
}
