// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  MANAGER
  VIEWER
}

enum TransactionType {
  ADD
  REMOVE
  TRANSFER
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  MOVE
  ADJUST
}

model Account {
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


model Organization {
  id             String             @id @default(uuid())
  name           String
  sections       InventorySection[]
  items          InventoryItem[]
  users          User[]
  createdAt      DateTime           @default(now())
}

model InventorySection {
  id             String             @id @default(uuid())
  name           String
  description    String?
  createdAt      DateTime           @default(now())

  parentId       String?
  parent         InventorySection?  @relation("SectionHierarchy", fields: [parentId], references: [id])
  children       InventorySection[] @relation("SectionHierarchy")

  organization   Organization       @relation(fields: [organizationId], references: [id])
  organizationId String

  items          InventoryItem[]

  @@unique([name, organizationId])
  @@index([organizationId])
}

model InventoryItem {
  id             String       @id @default(uuid())
  name           String
  quantity       Int
  location       String
  sku            String       @unique
  createdAt      DateTime     @default(now())

  createdBy      User         @relation("CreatedByUser", fields: [createdById], references: [id])
  createdById    String

  section        InventorySection? @relation(fields: [sectionId], references: [id])
  sectionId      String?

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String

  auditLogs      AuditLog[]         @relation("ItemAuditLog")
  transactions   StockTransaction[]

  @@index([organizationId])
  @@index([sectionId])
}

model User {
  id             String       @id @default(uuid())
  email          String       @unique
  emailVerified DateTime?
  name           String
  password       String?
  image         String?
  role           UserRole?@default(ADMIN)
  createdItems   InventoryItem[] @relation("CreatedByUser")
  organization   Organization?    @relation(fields: [organizationId], references: [id])
  organizationId String?
  accounts Account[]
  sessions Session[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model AuditLog {
  id             String       @id @default(uuid())
  item           InventoryItem @relation("ItemAuditLog", fields: [itemId], references: [id])
  itemId         String
  action         AuditAction
  quantityChange Int
  timestamp      DateTime     @default(now())
}

model StockTransaction {
  id             String           @id @default(uuid())
  item           InventoryItem    @relation(fields: [itemId], references: [id])
  itemId         String
  quantity       Int
  type           TransactionType
  timestamp      DateTime         @default(now())
}